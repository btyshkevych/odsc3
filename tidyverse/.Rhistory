print("r")
install.packages("tidyverse")
library(tidyverse)
library(dpyr)
library(dplyr)
df <- read.csv("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv")
df <- read.csv("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv", sep = ";")
?read.csv
?read.delim
df <- read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
header = TRUE, sep = ";", dec = ",")
df <- read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
header = TRUE, sep = ";", dec = ",")
df <- read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv", header = TRUE, sep = ";", dec = ",")
df <- read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
header = TRUE, sep = ";", dec = ",", encoding = "Windows-1251" )
read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
header = TRUE, sep = ";", dec = ",", encoding = "Windows 1251")
read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
header = TRUE, sep = ";", dec = ",", encoding = "Windows 1251")
df <- read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
header = TRUE, sep = ";", dec = ",", fileEncoding = "Windows 1251")
df <- read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
header = TRUE, sep = ";", dec = ",", encoding = "windows-1251")
df <- read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
header = TRUE, sep = ";", dec = ",", encoding = "windows-1251")
df <- read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv", sep = ";", encoding = "windows-1251")
read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
encoding = "windows-1251")
read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
from = "CP866", to = "windows-1251")
read.delim("http://data.gov.ua/sites/default/files/media/document/595/23.05.2018/2008-2018_18052018.csv",
fileEncoding = "windows-1251")
shiny::runApp('riverPatterns')
runApp('riverPatterns')
runApp('riverPatterns')
runApp('riverPatterns')
runApp('riverPatterns')
runApp('riverPatterns')
runApp('riverPatterns')
runApp('riverPatterns')
runApp('riverPatterns')
runApp('riverPatterns')
colorNumeric(c("#12c2e9", "#f64f59"))
colorNumeric(c("#12c2e9", "#f64f59"), domain = filteredData$value)
runApp('riverPatterns')
runApp('riverPatterns')
display.brewer.all()
library(RColorBrewer)
display.brewer.all()
runApp('riverPatterns')
runApp('riverPatterns')
riversStats
riversStats <- read.csv("riversStats.csv", stringsAsFactors = FALSE)
setwd("~/riverPatterns")
riversStats <- read.csv("riversStats.csv", stringsAsFactors = FALSE)
riversStats[5]
riversStats[6]
riversStats[7]
runApp()
runApp()
runApp()
?addCircles
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
domain <- filter(riversStats, valueType == input$valueType & substance == input$pollutant)[7]
pal <- colorNumeric(pal = c("#12c2e9", "#f64f59"), domain = domain)
domain <- filter(riversStats, valueType == "max" & substance == "АмонійІониМгДм3")[7]
domain <- filter(riversStats, valueType == "max" & substance == "АмонійІониМгДм3")[7] %>% as.vector()
pal <- colorNumeric(pal = c("#12c2e9", "#f64f59"), domain = domain)
domain <- as.vector(filter(riversStats, valueType == "max" & substance == "АмонійІониМгДм3")[7])
as.vector(filter(riversStats, valueType == "max" & substance == "АмонійІониМгДм3")[7])
type(as.vector(filter(riversStats, valueType == "max" & substance == "АмонійІониМгДм3")[7]))
typeof(as.vector(filter(riversStats, valueType == "max" & substance == "АмонійІониМгДм3")[7]))
str(filter(riversStats, valueType == "max" & substance == "АмонійІониМгДм3")[7])
str(filter(riversStats, valueType == "max" & substance == "АмонійІониМгДм3")[7]$value))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='btyshkevych', token='415CA2DCBE8F1733F339900FEAA1A786', secret='<SECRET>')
library(tidyverse)
library(ggmap)
# lubridate пакунок для легкої роботи з датами.
library(lubridate)
rivers <- read.csv("2008-18-18052018.csv", fileEncoding = "UTF-8", stringsAsFactors = FALSE)
rivers_long <- gather(rivers, substance, concentration, -c(1:8))
# робимо glimpse(rivers_long) у консолі і дивимось на тип значень у полі concentration.
# Зараз вони вони всі рядки - "chr", а треба їх виправити на числові "dbl".
rivers_long$concentration <- as.numeric(rivers_long$concentration)
# також претворимодату як рядок у обєкт дату. Це допоможе нам їх обчислювати.
rivers_long$ДатаCпостережень <- dmy(rivers_long$ДатаCпостережень)
setwd("~/Desktop/rivers_data")
# Важливі посилання
# Веб сторінка Tidyvers: https://www.tidyverse.org/
# Підказки по R та RStudio у зручному форматі: https://www.rstudio.com/resources/cheatsheets/
# КРОК 1: Інсталюємо пакунки. Це робиться всього один раз.
# Якщо у вас все всже інстальовано пропустіть цей крок.
install.packages("tidyverse")
install.packages("ggmap")
install.packages("lubridate")
# КРОК 2: встновлюємо робочу директорію. Це можна зробити функціє або у графічному інтерфейсі.
# Оскільки у мене всі файли знаходяться в папці "~/Desktop/rivers_data", я використовую наступнимй код:
setwd("~/Desktop/rivers_data")
# КРОК 3: За допомогою функції library() завантажуємо пакунки які потрібні нам для роботи.
library(tidyverse)
library(ggmap)
# lubridate пакунок для легкої роботи з датами.
library(lubridate)
# КРОК 4: ІМПОРТУЄМО ДАНІ У R
rivers <- read.csv("2008-18-18052018.csv", fileEncoding = "UTF-8", stringsAsFactors = FALSE)
# КРОК 5: ПОДОСЛІДЖУЄМО ТА ВІДБИРАЄМО РІЗНІ ЧАСТИНИ ТАБЛИЦІ
# проглянемо структуру файлів та інші характеристики. Це все буде друкуватися у консоль.
colnames(rivers)
nrow(rivers)
str(rivers)
glimpse(rivers)
summary(rivers)
# обиремо колонку таблиці
rivers$ЗависліРечовиниМгДм3
# обиремо рядок таблиці
rivers[2, ]
# обиремо декілька рядків таблиці
rivers[2:4, ]
# обиремо клітинку: перше число це номер рядка, другий - стовпчика (як на шахівниці)
rivers[2,4]
# КРОК 6: ПЕРЕТВОРЮЄМО ТАБЛИЦЮ З ШИРОКОЇ У ДОВГУ ЗА ДОПОМОГОЮ ФУНКЦІЇ gather() З TIDYR
rivers_long <- gather(rivers, substance, concentration, -c(1:8))
# робимо glimpse(rivers_long) у консолі і дивимось на тип значень у полі concentration.
# Зараз вони вони всі рядки - "chr", а треба їх виправити на числові "dbl".
rivers_long$concentration <- as.numeric(rivers_long$concentration)
# також претворимодату як рядок у обєкт дату. Це допоможе нам їх обчислювати.
rivers_long$ДатаCпостережень <- dmy(rivers_long$ДатаCпостережень)
# РОЗПОЧИНАЄМО DPLYR АЛЕ СПОЧАТКУ ПРО PIPE
# Відступ про pipe - "%>%" і для чого він нап потрібний
# код без pipe: (1)фільтуємо сульфат-іон - (2)групуємо за постами - (3)зводимо за максимумом - (4)сортуємо за зростанням
# у вашому глобальному середовищі зявляється три проміжні таблиці і ви маєте памятати їх назви. Це зайве.
rivers_filtred <- filter(rivers_long, substance == "СульфатІониМгДм3")
rivers_grouped <- group_by(rivers_filtred, НазваПС)
rivers_summarised <- summarise(rivers_grouped, max_value = max(concentration))
sufat_rivers <- arrange(rivers_summarised, max_value)
# код з pipe: (1)фільтуємо сульфат-іон - (2)групуємо за постами - (3)зводимо за максимумом - (4)сортуємо за зростанням
# зверніть увагу, як просто читається код і який він компактний.
sufat_rivers <- rivers_long %>%
filter(substance == "СульфатІониМгДм3") %>%
group_by(НазваПС) %>%
summarise(max_value = max(concentration)) %>%
arrange(max_value)
# КРОК 7. НАШЕ ЗАВДАННЯ РОЗРАЗРАХУВАТИ СЕРЕДНЄ ЗНАЧЕННЯ ПО КОНЦЕНТРАЦІЇ ЗАБРУДНЮЮЧИХ РЕЧОВИН (concentration)
# НА КОЖНОМУ ПОСТІ СПОСТЕРЕЖЕННЯ (НазваПС). ВИКОРИСТАЄМО DPLYR
# na.omit() - пропустити NA
substs_on_posts <- rivers_long %>%
na.omit() %>%
# відфільтруємо спостереження за 2018 рік
# filter(ДатаCпостережень < as.Date("2018-01-01") & ДатаCпостережень >= as.Date("2014-01-01")) %>%
# групувати треба за НазваПС, substance, але ми додамо ще lat та lon, щоб лишити їх у таблиці для візуалізації.
group_by(НазваПС, substance, lat, lon) %>%
summarize(mean = mean(concentration), median = median(concentration), min = min(concentration), max = max(concentration))
write.csv(gather(substs_on_posts, valueType, value, -c(1:4)), "riversStats.csv")
# КРОК 8. СТВОРЮЄМО КАРТУ У GGMAP
# визначимо вектор з центральними координатами для території України
ukraine <- c(lon = 31.2, lat = 49.0)
# закачаємо підкладку
ukraine_map <- get_map(ukraine, zoom = 5, scale = 3,
maptype = "toner-lite", source = "stamen")
install.packages("tidyverse")
ggmap(ukraine_map,
base_layer = ggplot(data, aes(lon, lat, col = mean))) +
geom_point(size = 0.75) + scale_colour_gradient(low = "#4286f4", high = "#373B44") +
labs(title = i) +
facet_wrap(~substance)
setwd("~/Desktop/rivers_data")
library(tidyverse)
library(ggmap)
# lubridate пакунок для легкої роботи з датами.
library(lubridate)
rivers <- read.csv("2008-18-18052018.csv", fileEncoding = "UTF-8", stringsAsFactors = FALSE)
rivers <- read.csv("2008-18-18052018.csv", fileEncoding = "UTF-8", stringsAsFactors = FALSE)
rivers_long <- gather(rivers, substance, concentration, -c(1:8))
# робимо glimpse(rivers_long) у консолі і дивимось на тип значень у полі concentration.
# Зараз вони вони всі рядки - "chr", а треба їх виправити на числові "dbl".
rivers_long$concentration <- as.numeric(rivers_long$concentration)
# також претворимодату як рядок у обєкт дату. Це допоможе нам їх обчислювати.
rivers_long$ДатаCпостережень <- dmy(rivers_long$ДатаCпостережень)
substs_on_posts <- rivers_long %>%
na.omit() %>%
# відфільтруємо спостереження за 2018 рік
# filter(ДатаCпостережень < as.Date("2018-01-01") & ДатаCпостережень >= as.Date("2014-01-01")) %>%
# групувати треба за НазваПС, substance, але ми додамо ще lat та lon, щоб лишити їх у таблиці для візуалізації.
group_by(НазваПС, substance, lat, lon) %>%
summarize(mean = mean(concentration), median = median(concentration), min = min(concentration), max = max(concentration))
# запишимо таблицю
# КРОК 8. СТВОРЮЄМО КАРТУ У GGMAP
# визначимо вектор з центральними координатами для території України
ukraine <- c(lon = 31.2, lat = 49.0)
# закачаємо підкладку
ukraine_map <- get_map(ukraine, zoom = 5, scale = 3,
maptype = "toner-lite", source = "stamen")
ggmap(ukraine_map,
base_layer = ggplot(data, aes(lon, lat, col = mean))) +
geom_point(size = 0.75) + scale_colour_gradient(low = "#4286f4", high = "#373B44") +
labs(title = i) +
facet_wrap(~substance)
ggmap(ukraine_map,
base_layer = ggplot(data, aes(lon, lat, col = mean))) +
geom_point(size = 0.75) + scale_colour_gradient(low = "#4286f4", high = "#373B44") +
facet_wrap(~substance)
ggmap(ukraine_map,
base_layer = ggplot(data, aes(lon, lat, col = mean))) +
geom_point(size = 0.75) + scale_colour_gradient(low = "#4286f4", high = "#373B44") +
facet_wrap(~ substance)
ggmap(ukraine_map,
base_layer = ggplot(substs_on_posts, aes(lon, lat, col = mean))) +
geom_point(size = 0.75) + scale_colour_gradient(low = "#4286f4", high = "#373B44") +
facet_wrap(~ substance)
ggmap(ukraine_map,
base_layer = ggplot(substs_on_posts, aes(lon, lat, col = mean))) +
geom_point(size = 0.5) + scale_colour_gradient(low = "#4286f4", high = "#373B44") +
facet_wrap(~ substance)
setwd("~/odsc/tidyverse")
